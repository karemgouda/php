<?php

require_once __DIR__ . '/../../config/Database.php';

class Security
{
    // Properties
    private $id;
    private $name;
    private $email;
    private $password;

    private $db; // Database connection instance

    // Constructor
    public function __construct($db, $id = null, $name = '', $email = '', $password = '')
    {
        $this->db = $db;
        $this->id = $id;
        $this->name = $name;
        $this->email = $email;
        $this->password = password_hash($password, PASSWORD_DEFAULT);; // Hash password if provided
    }

    // Getters
    public function getId()
    {
        return $this->id;
    }

    public function getName()
    {
        return $this->name;
    }

    public function getEmail()
    {
        return $this->email;
    }
    public function getPassword()
    {
        return $this->password;
    }

    // Setters
    public function setName($name)
    {
        $this->name = $name;
    }

    public function setEmail($email)
    {
        $this->email = $email;
    }
    public function setPassword($password)
    {
        $this->password = password_hash($password, PASSWORD_DEFAULT); // Hash the new password
    }

    // Get security personnel by ID
    public static function getById($db, $id)
    {
        try {
            $stmt = $db->prepare("SELECT * FROM security WHERE security_id = :security_id");
            $stmt->execute(['security_id' => $id]);

            $securityData = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($securityData) {
                return new Security(
                    $db,
                    $securityData['security_id'],
                    $securityData['name'],
                    $securityData['email'],
                    $securityData['password']
                );
            } else {
                return null; // Security personnel not found
            }
        } catch (Exception $e) {
            return json_encode(['success' => false, 'error' => $e->getMessage()]);
        }
    }
    // Login method to authenticate user
    public static function login($db, $email, $password)
    {
        try {
            $stmt = $db->prepare("SELECT * FROM security WHERE email = :email");
            $stmt->bindParam(':email', $email);
            $stmt->execute();
            $securityData = $stmt->fetch(PDO::FETCH_ASSOC);
    
            if ($securityData && password_verify($password, $securityData['password'])) {
                return new Security(
                    $db,
                    $securityData['security_id'],
                    $securityData['name'],
                    $securityData['email'],
                    $securityData['password']
                );
            } else {
                return null; // Invalid credentials
            }
        } catch (Exception $e) {
            throw new Exception("Error during login: " . $e->getMessage());
        }
    }
    // Get security personnel by email
    public function getByEmail($email)
    {
        $stmt = $this->db->prepare("SELECT * FROM security WHERE email = ?");
        $stmt->execute([$email]);
        return $stmt->fetch(PDO::FETCH_ASSOC);
    }

    // Get all security personnel
    public static function getAll($db)
    {
        try {
            $stmt = $db->query("SELECT * FROM security");

            $securityData = $stmt->fetchAll(PDO::FETCH_ASSOC);

            $securityPersonnel = [];

            foreach ($securityData as $data) {
                $securityPersonnel[] = new Security(
                    $db,
                    $data['security_id'],
                    $data['name'],
                    $data['email'],
                    $data['password']
                );
            }

            return $securityPersonnel;
        } catch (Exception $e) {
            return json_encode(['success' => false, 'error' => $e->getMessage()]);
        }
    }

    public function store()
    {
        try {
            $stmt = $this->db->prepare("INSERT INTO security (name, email, password) VALUES (:name, :email, :password)");
            $stmt->execute([
                'name' => $this->name,
                'email' => $this->email,
                'password' => $this->password
            ]);
            $this->id = $this->db->lastInsertId(); // Update object with the ID generated by the database
            return json_encode(['success' => true, 'message' => 'Security personnel created successfully']);
        } catch (Exception $e) {
            return json_encode(['success' => false, 'error' => $e->getMessage()]);
        }
    }

    public function update()
    {
        try {
            $stmt = $this->db->prepare("UPDATE security SET name = :name, email = :email WHERE security_id = :security_id");
            $stmt->execute([
                'id' => $this->id,
                'name' => $this->name,
                'email' => $this->email
            ]);
            return json_encode(['success' => true, 'message' => 'Security personnel updated successfully']);
        } catch (Exception $e) {
            return json_encode(['success' => false, 'error' => $e->getMessage()]);
        }
    }

    // Save security personnel to the database
    public function save()
    {
        try {
            $stmt = $this->db->prepare("INSERT INTO security (name, email, password) VALUES (:name, :email, :password)");
            $stmt->execute([
                'name' => $this->name,
                'email' => $this->email,
                'password' => $this->password
            ]);
            $this->id = $this->db->lastInsertId(); // Update object with the ID generated by the database
            return json_encode(['success' => true, 'message' => 'Security personnel created successfully']);
        } catch (Exception $e) {
            return json_encode(['success' => false, 'error' => $e->getMessage()]);
        }
    }

    // Delete the security entry from the database
    public function destroy()
    {
        try {
            $stmt = $this->db->prepare("DELETE FROM security WHERE security_id = :security_id");
            $stmt->execute(['id' => $this->id]);
            return json_encode(['success' => true, 'message' => 'Security personnel deleted successfully']);
        } catch (Exception $e) {
            return json_encode(['success' => false, 'error' => $e->getMessage()]);
        }
    }
}
